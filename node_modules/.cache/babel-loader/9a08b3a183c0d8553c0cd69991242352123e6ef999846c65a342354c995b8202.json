{"ast":null,"code":"import db from \"../db.js\";\nimport nodemailer from \"nodemailer\";\nimport crypto from \"crypto\";\nexport const forgotPassword = async (req, res) => {\n  const {\n    email\n  } = req.body;\n\n  // Always reply the same message to prevent user enumeration\n  db.query(\"SELECT * FROM users WHERE email = ?\", [email], async (err, users) => {\n    if (err || !users || users.length === 0) {\n      return res.status(200).json({\n        message: \"If an account exists, a reset link will be sent to your email.\"\n      });\n    }\n    const token = crypto.randomBytes(32).toString(\"hex\");\n    const expires = new Date(Date.now() + 3600000); // 1 hour expiry\n\n    // Save token and expiry in database\n    db.query(\"UPDATE users SET reset_token=?, reset_token_expiry=? WHERE email=?\", [token, expires, email], (updateErr, updateResult) => {\n      if (updateErr || updateResult.affectedRows === 0) {\n        console.error(\"DB UPDATE ERROR or no user updated\");\n        return;\n      }\n\n      // Set up email transporter\n      const transporter = nodemailer.createTransport({\n        host: \"smtp.gmail.com\",\n        port: 587,\n        secure: false,\n        auth: {\n          user: process.env.EMAIL_USER,\n          pass: process.env.EMAIL_PASS\n        },\n        tls: {\n          rejectUnauthorized: false\n        }\n      });\n\n      // Build reset URL dynamically from environment variable\n      const resetUrl = `${process.env.FRONTEND_URL}/reset-password?token=${token}`;\n      const mailOptions = {\n        from: process.env.EMAIL_USER,\n        to: email,\n        subject: \"Password Reset Link\",\n        html: `<p>Click <a href=\"${resetUrl}\">${resetUrl}</a> to reset your password.</p>`\n      };\n\n      // Send email (background task)\n      transporter.sendMail(mailOptions, (mailErr, info) => {\n        if (mailErr) {\n          console.error(\"MAIL ERROR:\", mailErr);\n        } else {\n          console.log(\"Reset email sent:\", info.response);\n        }\n      });\n      // No need to wait, response already sent\n      return res.status(200).json({\n        message: \"If an account exists, a reset link will be sent to your email.\"\n      });\n    });\n  });\n};","map":{"version":3,"names":["db","nodemailer","crypto","forgotPassword","req","res","email","body","query","err","users","length","status","json","message","token","randomBytes","toString","expires","Date","now","updateErr","updateResult","affectedRows","console","error","transporter","createTransport","host","port","secure","auth","user","process","env","EMAIL_USER","pass","EMAIL_PASS","tls","rejectUnauthorized","resetUrl","FRONTEND_URL","mailOptions","from","to","subject","html","sendMail","mailErr","info","log","response"],"sources":["D:/bank/banking-finance-system/frontend/client/src/components/ForgotPassword.js"],"sourcesContent":["import db from \"../db.js\";\r\nimport nodemailer from \"nodemailer\";\r\nimport crypto from \"crypto\";\r\n\r\nexport const forgotPassword = async (req, res) => {\r\n  const { email } = req.body;\r\n\r\n  // Always reply the same message to prevent user enumeration\r\n  db.query(\"SELECT * FROM users WHERE email = ?\", [email], async (err, users) => {\r\n    if (err || !users || users.length === 0) {\r\n      return res.status(200).json({ message: \"If an account exists, a reset link will be sent to your email.\" });\r\n    }\r\n\r\n    const token = crypto.randomBytes(32).toString(\"hex\");\r\n    const expires = new Date(Date.now() + 3600000); // 1 hour expiry\r\n\r\n    // Save token and expiry in database\r\n    db.query(\r\n      \"UPDATE users SET reset_token=?, reset_token_expiry=? WHERE email=?\",\r\n      [token, expires, email],\r\n      (updateErr, updateResult) => {\r\n        if (updateErr || updateResult.affectedRows === 0) {\r\n          console.error(\"DB UPDATE ERROR or no user updated\");\r\n          return;\r\n        }\r\n\r\n        // Set up email transporter\r\n        const transporter = nodemailer.createTransport({\r\n          host: \"smtp.gmail.com\",\r\n          port: 587,\r\n          secure: false,\r\n          auth: {\r\n            user: process.env.EMAIL_USER,\r\n            pass: process.env.EMAIL_PASS\r\n          },\r\n          tls: { rejectUnauthorized: false },\r\n        });\r\n\r\n        // Build reset URL dynamically from environment variable\r\n        const resetUrl = `${process.env.FRONTEND_URL}/reset-password?token=${token}`;\r\n\r\n        const mailOptions = {\r\n          from: process.env.EMAIL_USER,\r\n          to: email,\r\n          subject: \"Password Reset Link\",\r\n          html: `<p>Click <a href=\"${resetUrl}\">${resetUrl}</a> to reset your password.</p>`\r\n        };\r\n\r\n        // Send email (background task)\r\n        transporter.sendMail(mailOptions, (mailErr, info) => {\r\n          if (mailErr) {\r\n            console.error(\"MAIL ERROR:\", mailErr);\r\n          } else {\r\n            console.log(\"Reset email sent:\", info.response);\r\n          }\r\n        });\r\n        // No need to wait, response already sent\r\n        return res.status(200).json({ message: \"If an account exists, a reset link will be sent to your email.\" });\r\n      }\r\n    );\r\n  });\r\n};\r\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,UAAU;AACzB,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,MAAM,MAAM,QAAQ;AAE3B,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAChD,MAAM;IAAEC;EAAM,CAAC,GAAGF,GAAG,CAACG,IAAI;;EAE1B;EACAP,EAAE,CAACQ,KAAK,CAAC,qCAAqC,EAAE,CAACF,KAAK,CAAC,EAAE,OAAOG,GAAG,EAAEC,KAAK,KAAK;IAC7E,IAAID,GAAG,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACvC,OAAON,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAiE,CAAC,CAAC;IAC5G;IAEA,MAAMC,KAAK,GAAGb,MAAM,CAACc,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;IACpD,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;;IAEhD;IACApB,EAAE,CAACQ,KAAK,CACN,oEAAoE,EACpE,CAACO,KAAK,EAAEG,OAAO,EAAEZ,KAAK,CAAC,EACvB,CAACe,SAAS,EAAEC,YAAY,KAAK;MAC3B,IAAID,SAAS,IAAIC,YAAY,CAACC,YAAY,KAAK,CAAC,EAAE;QAChDC,OAAO,CAACC,KAAK,CAAC,oCAAoC,CAAC;QACnD;MACF;;MAEA;MACA,MAAMC,WAAW,GAAGzB,UAAU,CAAC0B,eAAe,CAAC;QAC7CC,IAAI,EAAE,gBAAgB;QACtBC,IAAI,EAAE,GAAG;QACTC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE;UACJC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,UAAU;UAC5BC,IAAI,EAAEH,OAAO,CAACC,GAAG,CAACG;QACpB,CAAC;QACDC,GAAG,EAAE;UAAEC,kBAAkB,EAAE;QAAM;MACnC,CAAC,CAAC;;MAEF;MACA,MAAMC,QAAQ,GAAG,GAAGP,OAAO,CAACC,GAAG,CAACO,YAAY,yBAAyB1B,KAAK,EAAE;MAE5E,MAAM2B,WAAW,GAAG;QAClBC,IAAI,EAAEV,OAAO,CAACC,GAAG,CAACC,UAAU;QAC5BS,EAAE,EAAEtC,KAAK;QACTuC,OAAO,EAAE,qBAAqB;QAC9BC,IAAI,EAAE,qBAAqBN,QAAQ,KAAKA,QAAQ;MAClD,CAAC;;MAED;MACAd,WAAW,CAACqB,QAAQ,CAACL,WAAW,EAAE,CAACM,OAAO,EAAEC,IAAI,KAAK;QACnD,IAAID,OAAO,EAAE;UACXxB,OAAO,CAACC,KAAK,CAAC,aAAa,EAAEuB,OAAO,CAAC;QACvC,CAAC,MAAM;UACLxB,OAAO,CAAC0B,GAAG,CAAC,mBAAmB,EAAED,IAAI,CAACE,QAAQ,CAAC;QACjD;MACF,CAAC,CAAC;MACF;MACA,OAAO9C,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAiE,CAAC,CAAC;IAC5G,CACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}