{"ast":null,"code":"'use strict';\n\nconst Stream = require('stream').Stream;\nconst nmfetch = require('../fetch');\nconst crypto = require('crypto');\nconst shared = require('../shared');\n\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * Usage for generating access tokens with a custom method using provisionCallback:\n * provisionCallback(user, renew, callback)\n *   * user is the username to get the token for\n *   * renew is a boolean that if true indicates that existing token failed and needs to be renewed\n *   * callback is the callback to run with (error, accessToken [, expires])\n *     * accessToken is a string\n *     * expires is an optional expire time in milliseconds\n * If provisionCallback is used, then Nodemailer does not try to attempt generating the token by itself\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user User e-mail address\n * @param {String} options.clientId Client ID value\n * @param {String} options.clientSecret Client secret value\n * @param {String} options.refreshToken Refresh token for an user\n * @param {String} options.accessUrl Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'\n * @param {String} options.accessToken An existing valid accessToken\n * @param {String} options.privateKey Private key for JSW\n * @param {Number} options.expires Optional Access Token expire time in ms\n * @param {Number} options.timeout Optional TTL for Access Token in seconds\n * @param {Function} options.provisionCallback Function to run when a new access token is required\n */\nclass XOAuth2 extends Stream {\n  constructor(options, logger) {\n    super();\n    this.options = options || {};\n    if (options && options.serviceClient) {\n      if (!options.privateKey || !options.user) {\n        setImmediate(() => this.emit('error', new Error('Options \"privateKey\" and \"user\" are required for service account!')));\n        return;\n      }\n      let serviceRequestTimeout = Math.min(Math.max(Number(this.options.serviceRequestTimeout) || 0, 0), 3600);\n      this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;\n    }\n    this.logger = shared.getLogger({\n      logger\n    }, {\n      component: this.options.component || 'OAuth2'\n    });\n    this.provisionCallback = typeof this.options.provisionCallback === 'function' ? this.options.provisionCallback : false;\n    this.options.accessUrl = this.options.accessUrl || 'https://accounts.google.com/o/oauth2/token';\n    this.options.customHeaders = this.options.customHeaders || {};\n    this.options.customParams = this.options.customParams || {};\n    this.accessToken = this.options.accessToken || false;\n    if (this.options.expires && Number(this.options.expires)) {\n      this.expires = this.options.expires;\n    } else {\n      let timeout = Math.max(Number(this.options.timeout) || 0, 0);\n      this.expires = timeout && Date.now() + timeout * 1000 || 0;\n    }\n    this.renewing = false; // Track if renewal is in progress\n    this.renewalQueue = []; // Queue for pending requests during renewal\n  }\n\n  /**\n   * Returns or generates (if previous has expired) a XOAuth2 token\n   *\n   * @param {Boolean} renew If false then use cached access token (if available)\n   * @param {Function} callback Callback function with error object and token string\n   */\n  getToken(renew, callback) {\n    if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {\n      this.logger.debug({\n        tnx: 'OAUTH2',\n        user: this.options.user,\n        action: 'reuse'\n      }, 'Reusing existing access token for %s', this.options.user);\n      return callback(null, this.accessToken);\n    }\n\n    // check if it is possible to renew, if not, return the current token or error\n    if (!this.provisionCallback && !this.options.refreshToken && !this.options.serviceClient) {\n      if (this.accessToken) {\n        this.logger.debug({\n          tnx: 'OAUTH2',\n          user: this.options.user,\n          action: 'reuse'\n        }, 'Reusing existing access token (no refresh capability) for %s', this.options.user);\n        return callback(null, this.accessToken);\n      }\n      this.logger.error({\n        tnx: 'OAUTH2',\n        user: this.options.user,\n        action: 'renew'\n      }, 'Cannot renew access token for %s: No refresh mechanism available', this.options.user);\n      return callback(new Error(\"Can't create new access token for user\"));\n    }\n\n    // If renewal already in progress, queue this request instead of starting another\n    if (this.renewing) {\n      return this.renewalQueue.push({\n        renew,\n        callback\n      });\n    }\n    this.renewing = true;\n\n    // Handles token renewal completion - processes queued requests and cleans up\n    const generateCallback = (err, accessToken) => {\n      this.renewalQueue.forEach(item => item.callback(err, accessToken));\n      this.renewalQueue = [];\n      this.renewing = false;\n      if (err) {\n        this.logger.error({\n          err,\n          tnx: 'OAUTH2',\n          user: this.options.user,\n          action: 'renew'\n        }, 'Failed generating new Access Token for %s', this.options.user);\n      } else {\n        this.logger.info({\n          tnx: 'OAUTH2',\n          user: this.options.user,\n          action: 'renew'\n        }, 'Generated new Access Token for %s', this.options.user);\n      }\n      // Complete original request\n      callback(err, accessToken);\n    };\n    if (this.provisionCallback) {\n      this.provisionCallback(this.options.user, !!renew, (err, accessToken, expires) => {\n        if (!err && accessToken) {\n          this.accessToken = accessToken;\n          this.expires = expires || 0;\n        }\n        generateCallback(err, accessToken);\n      });\n    } else {\n      this.generateToken(generateCallback);\n    }\n  }\n\n  /**\n   * Updates token values\n   *\n   * @param {String} accessToken New access token\n   * @param {Number} timeout Access token lifetime in seconds\n   *\n   * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}\n   */\n  updateToken(accessToken, timeout) {\n    this.accessToken = accessToken;\n    timeout = Math.max(Number(timeout) || 0, 0);\n    this.expires = timeout && Date.now() + timeout * 1000 || 0;\n    this.emit('token', {\n      user: this.options.user,\n      accessToken: accessToken || '',\n      expires: this.expires\n    });\n  }\n\n  /**\n   * Generates a new XOAuth2 token with the credentials provided at initialization\n   *\n   * @param {Function} callback Callback function with error object and token string\n   */\n  generateToken(callback) {\n    let urlOptions;\n    let loggedUrlOptions;\n    if (this.options.serviceClient) {\n      // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount\n      let iat = Math.floor(Date.now() / 1000); // unix time\n      let tokenData = {\n        iss: this.options.serviceClient,\n        scope: this.options.scope || 'https://mail.google.com/',\n        sub: this.options.user,\n        aud: this.options.accessUrl,\n        iat,\n        exp: iat + this.options.serviceRequestTimeout\n      };\n      let token;\n      try {\n        token = this.jwtSignRS256(tokenData);\n      } catch (_err) {\n        return callback(new Error(\"Can't generate token. Check your auth options\"));\n      }\n      urlOptions = {\n        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n        assertion: token\n      };\n      loggedUrlOptions = {\n        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n        assertion: tokenData\n      };\n    } else {\n      if (!this.options.refreshToken) {\n        return callback(new Error(\"Can't create new access token for user\"));\n      }\n\n      // web app - https://developers.google.com/identity/protocols/OAuth2WebServer\n      urlOptions = {\n        client_id: this.options.clientId || '',\n        client_secret: this.options.clientSecret || '',\n        refresh_token: this.options.refreshToken,\n        grant_type: 'refresh_token'\n      };\n      loggedUrlOptions = {\n        client_id: this.options.clientId || '',\n        client_secret: (this.options.clientSecret || '').substr(0, 6) + '...',\n        refresh_token: (this.options.refreshToken || '').substr(0, 6) + '...',\n        grant_type: 'refresh_token'\n      };\n    }\n    Object.keys(this.options.customParams).forEach(key => {\n      urlOptions[key] = this.options.customParams[key];\n      loggedUrlOptions[key] = this.options.customParams[key];\n    });\n    this.logger.debug({\n      tnx: 'OAUTH2',\n      user: this.options.user,\n      action: 'generate'\n    }, 'Requesting token using: %s', JSON.stringify(loggedUrlOptions));\n    this.postRequest(this.options.accessUrl, urlOptions, this.options, (error, body) => {\n      let data;\n      if (error) {\n        return callback(error);\n      }\n      try {\n        data = JSON.parse(body.toString());\n      } catch (E) {\n        return callback(E);\n      }\n      if (!data || typeof data !== 'object') {\n        this.logger.debug({\n          tnx: 'OAUTH2',\n          user: this.options.user,\n          action: 'post'\n        }, 'Response: %s', (body || '').toString());\n        return callback(new Error('Invalid authentication response'));\n      }\n      let logData = {};\n      Object.keys(data).forEach(key => {\n        if (key !== 'access_token') {\n          logData[key] = data[key];\n        } else {\n          logData[key] = (data[key] || '').toString().substr(0, 6) + '...';\n        }\n      });\n      this.logger.debug({\n        tnx: 'OAUTH2',\n        user: this.options.user,\n        action: 'post'\n      }, 'Response: %s', JSON.stringify(logData));\n      if (data.error) {\n        // Error Response : https://tools.ietf.org/html/rfc6749#section-5.2\n        let errorMessage = data.error;\n        if (data.error_description) {\n          errorMessage += ': ' + data.error_description;\n        }\n        if (data.error_uri) {\n          errorMessage += ' (' + data.error_uri + ')';\n        }\n        return callback(new Error(errorMessage));\n      }\n      if (data.access_token) {\n        this.updateToken(data.access_token, data.expires_in);\n        return callback(null, this.accessToken);\n      }\n      return callback(new Error('No access token'));\n    });\n  }\n\n  /**\n   * Converts an access_token and user id into a base64 encoded XOAuth2 token\n   *\n   * @param {String} [accessToken] Access token string\n   * @return {String} Base64 encoded token for IMAP or SMTP login\n   */\n  buildXOAuth2Token(accessToken) {\n    let authData = ['user=' + (this.options.user || ''), 'auth=Bearer ' + (accessToken || this.accessToken), '', ''];\n    return Buffer.from(authData.join('\\x01'), 'utf-8').toString('base64');\n  }\n\n  /**\n   * Custom POST request handler.\n   * This is only needed to keep paths short in Windows – usually this module\n   * is a dependency of a dependency and if it tries to require something\n   * like the request module the paths get way too long to handle for Windows.\n   * As we do only a simple POST request we do not actually require complicated\n   * logic support (no redirects, no nothing) anyway.\n   *\n   * @param {String} url Url to POST to\n   * @param {String|Buffer} payload Payload to POST\n   * @param {Function} callback Callback function with (err, buff)\n   */\n  postRequest(url, payload, params, callback) {\n    let returned = false;\n    let chunks = [];\n    let chunklen = 0;\n    let req = nmfetch(url, {\n      method: 'post',\n      headers: params.customHeaders,\n      body: payload,\n      allowErrorResponse: true\n    });\n    req.on('readable', () => {\n      let chunk;\n      while ((chunk = req.read()) !== null) {\n        chunks.push(chunk);\n        chunklen += chunk.length;\n      }\n    });\n    req.once('error', err => {\n      if (returned) {\n        return;\n      }\n      returned = true;\n      return callback(err);\n    });\n    req.once('end', () => {\n      if (returned) {\n        return;\n      }\n      returned = true;\n      return callback(null, Buffer.concat(chunks, chunklen));\n    });\n  }\n\n  /**\n   * Encodes a buffer or a string into Base64url format\n   *\n   * @param {Buffer|String} data The data to convert\n   * @return {String} The encoded string\n   */\n  toBase64URL(data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(data);\n    }\n    return data.toString('base64').replace(/[=]+/g, '') // remove '='s\n    .replace(/\\+/g, '-') // '+' → '-'\n    .replace(/\\//g, '_'); // '/' → '_'\n  }\n\n  /**\n   * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)\n   *\n   * @param {Object} payload The payload to include in the generated token\n   * @return {String} The generated and signed token\n   */\n  jwtSignRS256(payload) {\n    payload = ['{\"alg\":\"RS256\",\"typ\":\"JWT\"}', JSON.stringify(payload)].map(val => this.toBase64URL(val)).join('.');\n    let signature = crypto.createSign('RSA-SHA256').update(payload).sign(this.options.privateKey);\n    return payload + '.' + this.toBase64URL(signature);\n  }\n}\nmodule.exports = XOAuth2;","map":{"version":3,"names":["Stream","require","nmfetch","crypto","shared","XOAuth2","constructor","options","logger","serviceClient","privateKey","user","setImmediate","emit","Error","serviceRequestTimeout","Math","min","max","Number","getLogger","component","provisionCallback","accessUrl","customHeaders","customParams","accessToken","expires","timeout","Date","now","renewing","renewalQueue","getToken","renew","callback","debug","tnx","action","refreshToken","error","push","generateCallback","err","forEach","item","info","generateToken","updateToken","urlOptions","loggedUrlOptions","iat","floor","tokenData","iss","scope","sub","aud","exp","token","jwtSignRS256","_err","grant_type","assertion","client_id","clientId","client_secret","clientSecret","refresh_token","substr","Object","keys","key","JSON","stringify","postRequest","body","data","parse","toString","E","logData","errorMessage","error_description","error_uri","access_token","expires_in","buildXOAuth2Token","authData","Buffer","from","join","url","payload","params","returned","chunks","chunklen","req","method","headers","allowErrorResponse","on","chunk","read","length","once","concat","toBase64URL","replace","map","val","signature","createSign","update","sign","module","exports"],"sources":["D:/bank/banking-finance-system/node_modules/nodemailer/lib/xoauth2/index.js"],"sourcesContent":["'use strict';\n\nconst Stream = require('stream').Stream;\nconst nmfetch = require('../fetch');\nconst crypto = require('crypto');\nconst shared = require('../shared');\n\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * Usage for generating access tokens with a custom method using provisionCallback:\n * provisionCallback(user, renew, callback)\n *   * user is the username to get the token for\n *   * renew is a boolean that if true indicates that existing token failed and needs to be renewed\n *   * callback is the callback to run with (error, accessToken [, expires])\n *     * accessToken is a string\n *     * expires is an optional expire time in milliseconds\n * If provisionCallback is used, then Nodemailer does not try to attempt generating the token by itself\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user User e-mail address\n * @param {String} options.clientId Client ID value\n * @param {String} options.clientSecret Client secret value\n * @param {String} options.refreshToken Refresh token for an user\n * @param {String} options.accessUrl Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'\n * @param {String} options.accessToken An existing valid accessToken\n * @param {String} options.privateKey Private key for JSW\n * @param {Number} options.expires Optional Access Token expire time in ms\n * @param {Number} options.timeout Optional TTL for Access Token in seconds\n * @param {Function} options.provisionCallback Function to run when a new access token is required\n */\nclass XOAuth2 extends Stream {\n    constructor(options, logger) {\n        super();\n\n        this.options = options || {};\n\n        if (options && options.serviceClient) {\n            if (!options.privateKey || !options.user) {\n                setImmediate(() => this.emit('error', new Error('Options \"privateKey\" and \"user\" are required for service account!')));\n                return;\n            }\n\n            let serviceRequestTimeout = Math.min(Math.max(Number(this.options.serviceRequestTimeout) || 0, 0), 3600);\n            this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;\n        }\n\n        this.logger = shared.getLogger(\n            {\n                logger\n            },\n            {\n                component: this.options.component || 'OAuth2'\n            }\n        );\n\n        this.provisionCallback = typeof this.options.provisionCallback === 'function' ? this.options.provisionCallback : false;\n\n        this.options.accessUrl = this.options.accessUrl || 'https://accounts.google.com/o/oauth2/token';\n        this.options.customHeaders = this.options.customHeaders || {};\n        this.options.customParams = this.options.customParams || {};\n\n        this.accessToken = this.options.accessToken || false;\n\n        if (this.options.expires && Number(this.options.expires)) {\n            this.expires = this.options.expires;\n        } else {\n            let timeout = Math.max(Number(this.options.timeout) || 0, 0);\n            this.expires = (timeout && Date.now() + timeout * 1000) || 0;\n        }\n\n        this.renewing = false; // Track if renewal is in progress\n        this.renewalQueue = []; // Queue for pending requests during renewal\n    }\n\n    /**\n     * Returns or generates (if previous has expired) a XOAuth2 token\n     *\n     * @param {Boolean} renew If false then use cached access token (if available)\n     * @param {Function} callback Callback function with error object and token string\n     */\n    getToken(renew, callback) {\n        if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {\n            this.logger.debug(\n                {\n                    tnx: 'OAUTH2',\n                    user: this.options.user,\n                    action: 'reuse'\n                },\n                'Reusing existing access token for %s',\n                this.options.user\n            );\n            return callback(null, this.accessToken);\n        }\n\n        // check if it is possible to renew, if not, return the current token or error\n        if (!this.provisionCallback && !this.options.refreshToken && !this.options.serviceClient) {\n            if (this.accessToken) {\n                this.logger.debug(\n                    {\n                        tnx: 'OAUTH2',\n                        user: this.options.user,\n                        action: 'reuse'\n                    },\n                    'Reusing existing access token (no refresh capability) for %s',\n                    this.options.user\n                );\n                return callback(null, this.accessToken);\n            }\n            this.logger.error(\n                {\n                    tnx: 'OAUTH2',\n                    user: this.options.user,\n                    action: 'renew'\n                },\n                'Cannot renew access token for %s: No refresh mechanism available',\n                this.options.user\n            );\n            return callback(new Error(\"Can't create new access token for user\"));\n        }\n\n        // If renewal already in progress, queue this request instead of starting another\n        if (this.renewing) {\n            return this.renewalQueue.push({ renew, callback });\n        }\n\n        this.renewing = true;\n\n        // Handles token renewal completion - processes queued requests and cleans up\n        const generateCallback = (err, accessToken) => {\n            this.renewalQueue.forEach(item => item.callback(err, accessToken));\n            this.renewalQueue = [];\n            this.renewing = false;\n\n            if (err) {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'OAUTH2',\n                        user: this.options.user,\n                        action: 'renew'\n                    },\n                    'Failed generating new Access Token for %s',\n                    this.options.user\n                );\n            } else {\n                this.logger.info(\n                    {\n                        tnx: 'OAUTH2',\n                        user: this.options.user,\n                        action: 'renew'\n                    },\n                    'Generated new Access Token for %s',\n                    this.options.user\n                );\n            }\n            // Complete original request\n            callback(err, accessToken);\n        };\n\n        if (this.provisionCallback) {\n            this.provisionCallback(this.options.user, !!renew, (err, accessToken, expires) => {\n                if (!err && accessToken) {\n                    this.accessToken = accessToken;\n                    this.expires = expires || 0;\n                }\n                generateCallback(err, accessToken);\n            });\n        } else {\n            this.generateToken(generateCallback);\n        }\n    }\n\n    /**\n     * Updates token values\n     *\n     * @param {String} accessToken New access token\n     * @param {Number} timeout Access token lifetime in seconds\n     *\n     * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}\n     */\n    updateToken(accessToken, timeout) {\n        this.accessToken = accessToken;\n        timeout = Math.max(Number(timeout) || 0, 0);\n        this.expires = (timeout && Date.now() + timeout * 1000) || 0;\n\n        this.emit('token', {\n            user: this.options.user,\n            accessToken: accessToken || '',\n            expires: this.expires\n        });\n    }\n\n    /**\n     * Generates a new XOAuth2 token with the credentials provided at initialization\n     *\n     * @param {Function} callback Callback function with error object and token string\n     */\n    generateToken(callback) {\n        let urlOptions;\n        let loggedUrlOptions;\n        if (this.options.serviceClient) {\n            // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount\n            let iat = Math.floor(Date.now() / 1000); // unix time\n            let tokenData = {\n                iss: this.options.serviceClient,\n                scope: this.options.scope || 'https://mail.google.com/',\n                sub: this.options.user,\n                aud: this.options.accessUrl,\n                iat,\n                exp: iat + this.options.serviceRequestTimeout\n            };\n            let token;\n            try {\n                token = this.jwtSignRS256(tokenData);\n            } catch (_err) {\n                return callback(new Error(\"Can't generate token. Check your auth options\"));\n            }\n\n            urlOptions = {\n                grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                assertion: token\n            };\n\n            loggedUrlOptions = {\n                grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                assertion: tokenData\n            };\n        } else {\n            if (!this.options.refreshToken) {\n                return callback(new Error(\"Can't create new access token for user\"));\n            }\n\n            // web app - https://developers.google.com/identity/protocols/OAuth2WebServer\n            urlOptions = {\n                client_id: this.options.clientId || '',\n                client_secret: this.options.clientSecret || '',\n                refresh_token: this.options.refreshToken,\n                grant_type: 'refresh_token'\n            };\n\n            loggedUrlOptions = {\n                client_id: this.options.clientId || '',\n                client_secret: (this.options.clientSecret || '').substr(0, 6) + '...',\n                refresh_token: (this.options.refreshToken || '').substr(0, 6) + '...',\n                grant_type: 'refresh_token'\n            };\n        }\n\n        Object.keys(this.options.customParams).forEach(key => {\n            urlOptions[key] = this.options.customParams[key];\n            loggedUrlOptions[key] = this.options.customParams[key];\n        });\n\n        this.logger.debug(\n            {\n                tnx: 'OAUTH2',\n                user: this.options.user,\n                action: 'generate'\n            },\n            'Requesting token using: %s',\n            JSON.stringify(loggedUrlOptions)\n        );\n\n        this.postRequest(this.options.accessUrl, urlOptions, this.options, (error, body) => {\n            let data;\n\n            if (error) {\n                return callback(error);\n            }\n\n            try {\n                data = JSON.parse(body.toString());\n            } catch (E) {\n                return callback(E);\n            }\n\n            if (!data || typeof data !== 'object') {\n                this.logger.debug(\n                    {\n                        tnx: 'OAUTH2',\n                        user: this.options.user,\n                        action: 'post'\n                    },\n                    'Response: %s',\n                    (body || '').toString()\n                );\n                return callback(new Error('Invalid authentication response'));\n            }\n\n            let logData = {};\n            Object.keys(data).forEach(key => {\n                if (key !== 'access_token') {\n                    logData[key] = data[key];\n                } else {\n                    logData[key] = (data[key] || '').toString().substr(0, 6) + '...';\n                }\n            });\n\n            this.logger.debug(\n                {\n                    tnx: 'OAUTH2',\n                    user: this.options.user,\n                    action: 'post'\n                },\n                'Response: %s',\n                JSON.stringify(logData)\n            );\n\n            if (data.error) {\n                // Error Response : https://tools.ietf.org/html/rfc6749#section-5.2\n                let errorMessage = data.error;\n                if (data.error_description) {\n                    errorMessage += ': ' + data.error_description;\n                }\n                if (data.error_uri) {\n                    errorMessage += ' (' + data.error_uri + ')';\n                }\n                return callback(new Error(errorMessage));\n            }\n\n            if (data.access_token) {\n                this.updateToken(data.access_token, data.expires_in);\n                return callback(null, this.accessToken);\n            }\n\n            return callback(new Error('No access token'));\n        });\n    }\n\n    /**\n     * Converts an access_token and user id into a base64 encoded XOAuth2 token\n     *\n     * @param {String} [accessToken] Access token string\n     * @return {String} Base64 encoded token for IMAP or SMTP login\n     */\n    buildXOAuth2Token(accessToken) {\n        let authData = ['user=' + (this.options.user || ''), 'auth=Bearer ' + (accessToken || this.accessToken), '', ''];\n        return Buffer.from(authData.join('\\x01'), 'utf-8').toString('base64');\n    }\n\n    /**\n     * Custom POST request handler.\n     * This is only needed to keep paths short in Windows – usually this module\n     * is a dependency of a dependency and if it tries to require something\n     * like the request module the paths get way too long to handle for Windows.\n     * As we do only a simple POST request we do not actually require complicated\n     * logic support (no redirects, no nothing) anyway.\n     *\n     * @param {String} url Url to POST to\n     * @param {String|Buffer} payload Payload to POST\n     * @param {Function} callback Callback function with (err, buff)\n     */\n    postRequest(url, payload, params, callback) {\n        let returned = false;\n\n        let chunks = [];\n        let chunklen = 0;\n\n        let req = nmfetch(url, {\n            method: 'post',\n            headers: params.customHeaders,\n            body: payload,\n            allowErrorResponse: true\n        });\n\n        req.on('readable', () => {\n            let chunk;\n            while ((chunk = req.read()) !== null) {\n                chunks.push(chunk);\n                chunklen += chunk.length;\n            }\n        });\n\n        req.once('error', err => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(err);\n        });\n\n        req.once('end', () => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(null, Buffer.concat(chunks, chunklen));\n        });\n    }\n\n    /**\n     * Encodes a buffer or a string into Base64url format\n     *\n     * @param {Buffer|String} data The data to convert\n     * @return {String} The encoded string\n     */\n    toBase64URL(data) {\n        if (typeof data === 'string') {\n            data = Buffer.from(data);\n        }\n\n        return data\n            .toString('base64')\n            .replace(/[=]+/g, '') // remove '='s\n            .replace(/\\+/g, '-') // '+' → '-'\n            .replace(/\\//g, '_'); // '/' → '_'\n    }\n\n    /**\n     * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)\n     *\n     * @param {Object} payload The payload to include in the generated token\n     * @return {String} The generated and signed token\n     */\n    jwtSignRS256(payload) {\n        payload = ['{\"alg\":\"RS256\",\"typ\":\"JWT\"}', JSON.stringify(payload)].map(val => this.toBase64URL(val)).join('.');\n        let signature = crypto.createSign('RSA-SHA256').update(payload).sign(this.options.privateKey);\n        return payload + '.' + this.toBase64URL(signature);\n    }\n}\n\nmodule.exports = XOAuth2;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC,CAACD,MAAM;AACvC,MAAME,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;AACnC,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,MAAM,GAAGH,OAAO,CAAC,WAAW,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,OAAO,SAASL,MAAM,CAAC;EACzBM,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAE;IACzB,KAAK,CAAC,CAAC;IAEP,IAAI,CAACD,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAE5B,IAAIA,OAAO,IAAIA,OAAO,CAACE,aAAa,EAAE;MAClC,IAAI,CAACF,OAAO,CAACG,UAAU,IAAI,CAACH,OAAO,CAACI,IAAI,EAAE;QACtCC,YAAY,CAAC,MAAM,IAAI,CAACC,IAAI,CAAC,OAAO,EAAE,IAAIC,KAAK,CAAC,mEAAmE,CAAC,CAAC,CAAC;QACtH;MACJ;MAEA,IAAIC,qBAAqB,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACC,MAAM,CAAC,IAAI,CAACZ,OAAO,CAACQ,qBAAqB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;MACxG,IAAI,CAACR,OAAO,CAACQ,qBAAqB,GAAGA,qBAAqB,IAAI,CAAC,GAAG,EAAE;IACxE;IAEA,IAAI,CAACP,MAAM,GAAGJ,MAAM,CAACgB,SAAS,CAC1B;MACIZ;IACJ,CAAC,EACD;MACIa,SAAS,EAAE,IAAI,CAACd,OAAO,CAACc,SAAS,IAAI;IACzC,CACJ,CAAC;IAED,IAAI,CAACC,iBAAiB,GAAG,OAAO,IAAI,CAACf,OAAO,CAACe,iBAAiB,KAAK,UAAU,GAAG,IAAI,CAACf,OAAO,CAACe,iBAAiB,GAAG,KAAK;IAEtH,IAAI,CAACf,OAAO,CAACgB,SAAS,GAAG,IAAI,CAAChB,OAAO,CAACgB,SAAS,IAAI,4CAA4C;IAC/F,IAAI,CAAChB,OAAO,CAACiB,aAAa,GAAG,IAAI,CAACjB,OAAO,CAACiB,aAAa,IAAI,CAAC,CAAC;IAC7D,IAAI,CAACjB,OAAO,CAACkB,YAAY,GAAG,IAAI,CAAClB,OAAO,CAACkB,YAAY,IAAI,CAAC,CAAC;IAE3D,IAAI,CAACC,WAAW,GAAG,IAAI,CAACnB,OAAO,CAACmB,WAAW,IAAI,KAAK;IAEpD,IAAI,IAAI,CAACnB,OAAO,CAACoB,OAAO,IAAIR,MAAM,CAAC,IAAI,CAACZ,OAAO,CAACoB,OAAO,CAAC,EAAE;MACtD,IAAI,CAACA,OAAO,GAAG,IAAI,CAACpB,OAAO,CAACoB,OAAO;IACvC,CAAC,MAAM;MACH,IAAIC,OAAO,GAAGZ,IAAI,CAACE,GAAG,CAACC,MAAM,CAAC,IAAI,CAACZ,OAAO,CAACqB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;MAC5D,IAAI,CAACD,OAAO,GAAIC,OAAO,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,OAAO,GAAG,IAAI,IAAK,CAAC;IAChE;IAEA,IAAI,CAACG,QAAQ,GAAG,KAAK,CAAC,CAAC;IACvB,IAAI,CAACC,YAAY,GAAG,EAAE,CAAC,CAAC;EAC5B;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACtB,IAAI,CAACD,KAAK,IAAI,IAAI,CAACR,WAAW,KAAK,CAAC,IAAI,CAACC,OAAO,IAAI,IAAI,CAACA,OAAO,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAE;MAC5E,IAAI,CAACtB,MAAM,CAAC4B,KAAK,CACb;QACIC,GAAG,EAAE,QAAQ;QACb1B,IAAI,EAAE,IAAI,CAACJ,OAAO,CAACI,IAAI;QACvB2B,MAAM,EAAE;MACZ,CAAC,EACD,sCAAsC,EACtC,IAAI,CAAC/B,OAAO,CAACI,IACjB,CAAC;MACD,OAAOwB,QAAQ,CAAC,IAAI,EAAE,IAAI,CAACT,WAAW,CAAC;IAC3C;;IAEA;IACA,IAAI,CAAC,IAAI,CAACJ,iBAAiB,IAAI,CAAC,IAAI,CAACf,OAAO,CAACgC,YAAY,IAAI,CAAC,IAAI,CAAChC,OAAO,CAACE,aAAa,EAAE;MACtF,IAAI,IAAI,CAACiB,WAAW,EAAE;QAClB,IAAI,CAAClB,MAAM,CAAC4B,KAAK,CACb;UACIC,GAAG,EAAE,QAAQ;UACb1B,IAAI,EAAE,IAAI,CAACJ,OAAO,CAACI,IAAI;UACvB2B,MAAM,EAAE;QACZ,CAAC,EACD,8DAA8D,EAC9D,IAAI,CAAC/B,OAAO,CAACI,IACjB,CAAC;QACD,OAAOwB,QAAQ,CAAC,IAAI,EAAE,IAAI,CAACT,WAAW,CAAC;MAC3C;MACA,IAAI,CAAClB,MAAM,CAACgC,KAAK,CACb;QACIH,GAAG,EAAE,QAAQ;QACb1B,IAAI,EAAE,IAAI,CAACJ,OAAO,CAACI,IAAI;QACvB2B,MAAM,EAAE;MACZ,CAAC,EACD,kEAAkE,EAClE,IAAI,CAAC/B,OAAO,CAACI,IACjB,CAAC;MACD,OAAOwB,QAAQ,CAAC,IAAIrB,KAAK,CAAC,wCAAwC,CAAC,CAAC;IACxE;;IAEA;IACA,IAAI,IAAI,CAACiB,QAAQ,EAAE;MACf,OAAO,IAAI,CAACC,YAAY,CAACS,IAAI,CAAC;QAAEP,KAAK;QAAEC;MAAS,CAAC,CAAC;IACtD;IAEA,IAAI,CAACJ,QAAQ,GAAG,IAAI;;IAEpB;IACA,MAAMW,gBAAgB,GAAGA,CAACC,GAAG,EAAEjB,WAAW,KAAK;MAC3C,IAAI,CAACM,YAAY,CAACY,OAAO,CAACC,IAAI,IAAIA,IAAI,CAACV,QAAQ,CAACQ,GAAG,EAAEjB,WAAW,CAAC,CAAC;MAClE,IAAI,CAACM,YAAY,GAAG,EAAE;MACtB,IAAI,CAACD,QAAQ,GAAG,KAAK;MAErB,IAAIY,GAAG,EAAE;QACL,IAAI,CAACnC,MAAM,CAACgC,KAAK,CACb;UACIG,GAAG;UACHN,GAAG,EAAE,QAAQ;UACb1B,IAAI,EAAE,IAAI,CAACJ,OAAO,CAACI,IAAI;UACvB2B,MAAM,EAAE;QACZ,CAAC,EACD,2CAA2C,EAC3C,IAAI,CAAC/B,OAAO,CAACI,IACjB,CAAC;MACL,CAAC,MAAM;QACH,IAAI,CAACH,MAAM,CAACsC,IAAI,CACZ;UACIT,GAAG,EAAE,QAAQ;UACb1B,IAAI,EAAE,IAAI,CAACJ,OAAO,CAACI,IAAI;UACvB2B,MAAM,EAAE;QACZ,CAAC,EACD,mCAAmC,EACnC,IAAI,CAAC/B,OAAO,CAACI,IACjB,CAAC;MACL;MACA;MACAwB,QAAQ,CAACQ,GAAG,EAAEjB,WAAW,CAAC;IAC9B,CAAC;IAED,IAAI,IAAI,CAACJ,iBAAiB,EAAE;MACxB,IAAI,CAACA,iBAAiB,CAAC,IAAI,CAACf,OAAO,CAACI,IAAI,EAAE,CAAC,CAACuB,KAAK,EAAE,CAACS,GAAG,EAAEjB,WAAW,EAAEC,OAAO,KAAK;QAC9E,IAAI,CAACgB,GAAG,IAAIjB,WAAW,EAAE;UACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;UAC9B,IAAI,CAACC,OAAO,GAAGA,OAAO,IAAI,CAAC;QAC/B;QACAe,gBAAgB,CAACC,GAAG,EAAEjB,WAAW,CAAC;MACtC,CAAC,CAAC;IACN,CAAC,MAAM;MACH,IAAI,CAACqB,aAAa,CAACL,gBAAgB,CAAC;IACxC;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,WAAWA,CAACtB,WAAW,EAAEE,OAAO,EAAE;IAC9B,IAAI,CAACF,WAAW,GAAGA,WAAW;IAC9BE,OAAO,GAAGZ,IAAI,CAACE,GAAG,CAACC,MAAM,CAACS,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3C,IAAI,CAACD,OAAO,GAAIC,OAAO,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,OAAO,GAAG,IAAI,IAAK,CAAC;IAE5D,IAAI,CAACf,IAAI,CAAC,OAAO,EAAE;MACfF,IAAI,EAAE,IAAI,CAACJ,OAAO,CAACI,IAAI;MACvBe,WAAW,EAAEA,WAAW,IAAI,EAAE;MAC9BC,OAAO,EAAE,IAAI,CAACA;IAClB,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACIoB,aAAaA,CAACZ,QAAQ,EAAE;IACpB,IAAIc,UAAU;IACd,IAAIC,gBAAgB;IACpB,IAAI,IAAI,CAAC3C,OAAO,CAACE,aAAa,EAAE;MAC5B;MACA,IAAI0C,GAAG,GAAGnC,IAAI,CAACoC,KAAK,CAACvB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;MACzC,IAAIuB,SAAS,GAAG;QACZC,GAAG,EAAE,IAAI,CAAC/C,OAAO,CAACE,aAAa;QAC/B8C,KAAK,EAAE,IAAI,CAAChD,OAAO,CAACgD,KAAK,IAAI,0BAA0B;QACvDC,GAAG,EAAE,IAAI,CAACjD,OAAO,CAACI,IAAI;QACtB8C,GAAG,EAAE,IAAI,CAAClD,OAAO,CAACgB,SAAS;QAC3B4B,GAAG;QACHO,GAAG,EAAEP,GAAG,GAAG,IAAI,CAAC5C,OAAO,CAACQ;MAC5B,CAAC;MACD,IAAI4C,KAAK;MACT,IAAI;QACAA,KAAK,GAAG,IAAI,CAACC,YAAY,CAACP,SAAS,CAAC;MACxC,CAAC,CAAC,OAAOQ,IAAI,EAAE;QACX,OAAO1B,QAAQ,CAAC,IAAIrB,KAAK,CAAC,+CAA+C,CAAC,CAAC;MAC/E;MAEAmC,UAAU,GAAG;QACTa,UAAU,EAAE,6CAA6C;QACzDC,SAAS,EAAEJ;MACf,CAAC;MAEDT,gBAAgB,GAAG;QACfY,UAAU,EAAE,6CAA6C;QACzDC,SAAS,EAAEV;MACf,CAAC;IACL,CAAC,MAAM;MACH,IAAI,CAAC,IAAI,CAAC9C,OAAO,CAACgC,YAAY,EAAE;QAC5B,OAAOJ,QAAQ,CAAC,IAAIrB,KAAK,CAAC,wCAAwC,CAAC,CAAC;MACxE;;MAEA;MACAmC,UAAU,GAAG;QACTe,SAAS,EAAE,IAAI,CAACzD,OAAO,CAAC0D,QAAQ,IAAI,EAAE;QACtCC,aAAa,EAAE,IAAI,CAAC3D,OAAO,CAAC4D,YAAY,IAAI,EAAE;QAC9CC,aAAa,EAAE,IAAI,CAAC7D,OAAO,CAACgC,YAAY;QACxCuB,UAAU,EAAE;MAChB,CAAC;MAEDZ,gBAAgB,GAAG;QACfc,SAAS,EAAE,IAAI,CAACzD,OAAO,CAAC0D,QAAQ,IAAI,EAAE;QACtCC,aAAa,EAAE,CAAC,IAAI,CAAC3D,OAAO,CAAC4D,YAAY,IAAI,EAAE,EAAEE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;QACrED,aAAa,EAAE,CAAC,IAAI,CAAC7D,OAAO,CAACgC,YAAY,IAAI,EAAE,EAAE8B,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;QACrEP,UAAU,EAAE;MAChB,CAAC;IACL;IAEAQ,MAAM,CAACC,IAAI,CAAC,IAAI,CAAChE,OAAO,CAACkB,YAAY,CAAC,CAACmB,OAAO,CAAC4B,GAAG,IAAI;MAClDvB,UAAU,CAACuB,GAAG,CAAC,GAAG,IAAI,CAACjE,OAAO,CAACkB,YAAY,CAAC+C,GAAG,CAAC;MAChDtB,gBAAgB,CAACsB,GAAG,CAAC,GAAG,IAAI,CAACjE,OAAO,CAACkB,YAAY,CAAC+C,GAAG,CAAC;IAC1D,CAAC,CAAC;IAEF,IAAI,CAAChE,MAAM,CAAC4B,KAAK,CACb;MACIC,GAAG,EAAE,QAAQ;MACb1B,IAAI,EAAE,IAAI,CAACJ,OAAO,CAACI,IAAI;MACvB2B,MAAM,EAAE;IACZ,CAAC,EACD,4BAA4B,EAC5BmC,IAAI,CAACC,SAAS,CAACxB,gBAAgB,CACnC,CAAC;IAED,IAAI,CAACyB,WAAW,CAAC,IAAI,CAACpE,OAAO,CAACgB,SAAS,EAAE0B,UAAU,EAAE,IAAI,CAAC1C,OAAO,EAAE,CAACiC,KAAK,EAAEoC,IAAI,KAAK;MAChF,IAAIC,IAAI;MAER,IAAIrC,KAAK,EAAE;QACP,OAAOL,QAAQ,CAACK,KAAK,CAAC;MAC1B;MAEA,IAAI;QACAqC,IAAI,GAAGJ,IAAI,CAACK,KAAK,CAACF,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC;MACtC,CAAC,CAAC,OAAOC,CAAC,EAAE;QACR,OAAO7C,QAAQ,CAAC6C,CAAC,CAAC;MACtB;MAEA,IAAI,CAACH,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QACnC,IAAI,CAACrE,MAAM,CAAC4B,KAAK,CACb;UACIC,GAAG,EAAE,QAAQ;UACb1B,IAAI,EAAE,IAAI,CAACJ,OAAO,CAACI,IAAI;UACvB2B,MAAM,EAAE;QACZ,CAAC,EACD,cAAc,EACd,CAACsC,IAAI,IAAI,EAAE,EAAEG,QAAQ,CAAC,CAC1B,CAAC;QACD,OAAO5C,QAAQ,CAAC,IAAIrB,KAAK,CAAC,iCAAiC,CAAC,CAAC;MACjE;MAEA,IAAImE,OAAO,GAAG,CAAC,CAAC;MAChBX,MAAM,CAACC,IAAI,CAACM,IAAI,CAAC,CAACjC,OAAO,CAAC4B,GAAG,IAAI;QAC7B,IAAIA,GAAG,KAAK,cAAc,EAAE;UACxBS,OAAO,CAACT,GAAG,CAAC,GAAGK,IAAI,CAACL,GAAG,CAAC;QAC5B,CAAC,MAAM;UACHS,OAAO,CAACT,GAAG,CAAC,GAAG,CAACK,IAAI,CAACL,GAAG,CAAC,IAAI,EAAE,EAAEO,QAAQ,CAAC,CAAC,CAACV,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;QACpE;MACJ,CAAC,CAAC;MAEF,IAAI,CAAC7D,MAAM,CAAC4B,KAAK,CACb;QACIC,GAAG,EAAE,QAAQ;QACb1B,IAAI,EAAE,IAAI,CAACJ,OAAO,CAACI,IAAI;QACvB2B,MAAM,EAAE;MACZ,CAAC,EACD,cAAc,EACdmC,IAAI,CAACC,SAAS,CAACO,OAAO,CAC1B,CAAC;MAED,IAAIJ,IAAI,CAACrC,KAAK,EAAE;QACZ;QACA,IAAI0C,YAAY,GAAGL,IAAI,CAACrC,KAAK;QAC7B,IAAIqC,IAAI,CAACM,iBAAiB,EAAE;UACxBD,YAAY,IAAI,IAAI,GAAGL,IAAI,CAACM,iBAAiB;QACjD;QACA,IAAIN,IAAI,CAACO,SAAS,EAAE;UAChBF,YAAY,IAAI,IAAI,GAAGL,IAAI,CAACO,SAAS,GAAG,GAAG;QAC/C;QACA,OAAOjD,QAAQ,CAAC,IAAIrB,KAAK,CAACoE,YAAY,CAAC,CAAC;MAC5C;MAEA,IAAIL,IAAI,CAACQ,YAAY,EAAE;QACnB,IAAI,CAACrC,WAAW,CAAC6B,IAAI,CAACQ,YAAY,EAAER,IAAI,CAACS,UAAU,CAAC;QACpD,OAAOnD,QAAQ,CAAC,IAAI,EAAE,IAAI,CAACT,WAAW,CAAC;MAC3C;MAEA,OAAOS,QAAQ,CAAC,IAAIrB,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACjD,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIyE,iBAAiBA,CAAC7D,WAAW,EAAE;IAC3B,IAAI8D,QAAQ,GAAG,CAAC,OAAO,IAAI,IAAI,CAACjF,OAAO,CAACI,IAAI,IAAI,EAAE,CAAC,EAAE,cAAc,IAAIe,WAAW,IAAI,IAAI,CAACA,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IAChH,OAAO+D,MAAM,CAACC,IAAI,CAACF,QAAQ,CAACG,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAACZ,QAAQ,CAAC,QAAQ,CAAC;EACzE;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIJ,WAAWA,CAACiB,GAAG,EAAEC,OAAO,EAAEC,MAAM,EAAE3D,QAAQ,EAAE;IACxC,IAAI4D,QAAQ,GAAG,KAAK;IAEpB,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,QAAQ,GAAG,CAAC;IAEhB,IAAIC,GAAG,GAAGhG,OAAO,CAAC0F,GAAG,EAAE;MACnBO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEN,MAAM,CAACtE,aAAa;MAC7BoD,IAAI,EAAEiB,OAAO;MACbQ,kBAAkB,EAAE;IACxB,CAAC,CAAC;IAEFH,GAAG,CAACI,EAAE,CAAC,UAAU,EAAE,MAAM;MACrB,IAAIC,KAAK;MACT,OAAO,CAACA,KAAK,GAAGL,GAAG,CAACM,IAAI,CAAC,CAAC,MAAM,IAAI,EAAE;QAClCR,MAAM,CAACvD,IAAI,CAAC8D,KAAK,CAAC;QAClBN,QAAQ,IAAIM,KAAK,CAACE,MAAM;MAC5B;IACJ,CAAC,CAAC;IAEFP,GAAG,CAACQ,IAAI,CAAC,OAAO,EAAE/D,GAAG,IAAI;MACrB,IAAIoD,QAAQ,EAAE;QACV;MACJ;MACAA,QAAQ,GAAG,IAAI;MACf,OAAO5D,QAAQ,CAACQ,GAAG,CAAC;IACxB,CAAC,CAAC;IAEFuD,GAAG,CAACQ,IAAI,CAAC,KAAK,EAAE,MAAM;MAClB,IAAIX,QAAQ,EAAE;QACV;MACJ;MACAA,QAAQ,GAAG,IAAI;MACf,OAAO5D,QAAQ,CAAC,IAAI,EAAEsD,MAAM,CAACkB,MAAM,CAACX,MAAM,EAAEC,QAAQ,CAAC,CAAC;IAC1D,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIW,WAAWA,CAAC/B,IAAI,EAAE;IACd,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC1BA,IAAI,GAAGY,MAAM,CAACC,IAAI,CAACb,IAAI,CAAC;IAC5B;IAEA,OAAOA,IAAI,CACNE,QAAQ,CAAC,QAAQ,CAAC,CAClB8B,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAAA,CACrBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAAA,CACpBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;EAC9B;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIjD,YAAYA,CAACiC,OAAO,EAAE;IAClBA,OAAO,GAAG,CAAC,6BAA6B,EAAEpB,IAAI,CAACC,SAAS,CAACmB,OAAO,CAAC,CAAC,CAACiB,GAAG,CAACC,GAAG,IAAI,IAAI,CAACH,WAAW,CAACG,GAAG,CAAC,CAAC,CAACpB,IAAI,CAAC,GAAG,CAAC;IAC9G,IAAIqB,SAAS,GAAG7G,MAAM,CAAC8G,UAAU,CAAC,YAAY,CAAC,CAACC,MAAM,CAACrB,OAAO,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC5G,OAAO,CAACG,UAAU,CAAC;IAC7F,OAAOmF,OAAO,GAAG,GAAG,GAAG,IAAI,CAACe,WAAW,CAACI,SAAS,CAAC;EACtD;AACJ;AAEAI,MAAM,CAACC,OAAO,GAAGhH,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}